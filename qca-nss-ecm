#!/bin/sh /etc/rc.common
# shellcheck disable=3043,3060,2086,2034

START=26
USE_PROCD=1

enable_packet_steering() {
  packet_steering="$(uci -q get network.globals.packet_steering)"
  steering_flows="$(uci -q get network.globals.steering_flows)"
  opts=""
  [ "${steering_flows:-0}" -gt 0 ] 2>/dev/null && opts="-l $steering_flows"

  if [ -e "/usr/libexec/platform/packet-steering.sh" ]; then
    /usr/libexec/platform/packet-steering.sh "$packet_steering"
  else
    /usr/libexec/network/packet-steering.uc $opts "$packet_steering"
  fi
}

sysctl_update() {
  local name value file
  name=${1//\//\\/}
  value=${2//\//\\/}
  file=${3:-/etc/sysctl.d/qca-nss-ecm.conf}

  if [ -r "/proc/sys/${name//./\/}" ]; then
    sed -i -e '/^#\?\(\s*'"${name}"'\s*=\s*\).*/{s//\1'"${value}"'/;:a;n;ba;q}' \
      -e '$a'"${name}"'='"${value}" "${file}"
    sysctl -w ${name}=${value}
  else
    if grep -qE '^#?\s*'"${name}\s*?=" "${file}"; then
      sed -i -e '/^#\?\(\s*'"${name}"'\s*=\s*\).*/{s//\#\1'"${value}"'/;:a;n;ba;q}' \
        -e '$a'"#${name}"'='"${value}" "${file}"
    fi
  fi
}

get_front_end_mode() {
  config_load "ecm"
  config_get front_end global acceleration_engine "auto"

  case $front_end in
    auto) echo '0' ;;
    nss)  echo '1' ;;
    sfe)  echo '2' ;;
    both) echo '4' ;;
    *)    echo '0' ;;
  esac
}

disable_bridge_filtering() {
  sysctl_update net.bridge.bridge-nf-call-arptables 0
  sysctl_update net.bridge.bridge-nf-call-iptables 0
  sysctl_update net.bridge.bridge-nf-call-ip6tables 0
}

enable_bridge_filtering() {
  config_load ecm
  config_get enable_bridge_filtering general enable_bridge_filtering 0

  if [ "$enable_bridge_filtering" -eq 1 ]; then
    sysctl_update net.bridge.bridge-nf-call-arptables 1
    sysctl_update net.bridge.bridge-nf-call-iptables 1
    sysctl_update net.bridge.bridge-nf-call-ip6tables 1
  else
    disable_bridge_filtering
  fi
}

set_front_end() {
  local get_front_end_mode=${1:-0}
  local module_conf=/etc/modules.conf
  [ ! -r "$module_conf" ] && touch "$module_conf"

  if grep -q "^options ecm" "$module_conf"; then
    if grep -q "front_end_selection=" "$module_conf"; then
      sed -i -E "s/(options ecm.*)front_end_selection=[0-9]+/\1front_end_selection=$get_front_end_mode/" "$module_conf"
    else
      sed -i -E "s/^(options ecm.*)/\1 front_end_selection=$get_front_end_mode/" "$module_conf"
    fi
  else
    echo "options ecm front_end_selection=$get_front_end_mode" >> "$module_conf"
  fi
}

load_ecm() {
  [ -d /sys/module/ecm ] || {
    local get_front_end_mode
    get_front_end_mode="$(get_front_end_mode)"
    modinfo ecm | awk '/depends/{gsub(",","\n",$NF);print $NF}' | xargs -r -n 1 modprobe
    set_front_end "$get_front_end_mode"
    modprobe ecm
    echo 1 > /sys/kernel/debug/ecm/ecm_classifier_default/accel_delay_pkts
  }

  . /lib/netifd/offload/disable_offloads.sh
  disable_offload

  echo 1 > /sys/kernel/debug/ecm/ecm_db/defunct_all
  echo f > /proc/net/nf_conntrack

  local kernel_major
  kernel_major=$(uname -r | cut -d. -f1)
  if [ "$kernel_major" -eq 6 ]; then
    echo 1 > /proc/sys/net/netfilter/nf_conntrack_events
  fi
}

unload_ecm() {
  disable_bridge_filtering

  local kernel_major
  kernel_major="$(uname -r | cut -d. -f1)"
  if [ "$kernel_major" -eq 6 ]; then
    echo 2 > /proc/sys/net/netfilter/nf_conntrack_events
  fi

  if [ -d /sys/module/ecm ]; then
    echo 1 > /sys/kernel/debug/ecm/front_end_ipv4_stop
    echo 1 > /sys/kernel/debug/ecm/front_end_ipv6_stop

    echo 1 > /sys/kernel/debug/ecm/ecm_db/defunct_all
    echo f > /proc/net/nf_conntrack

    sleep 1
    rmmod ecm
  fi
}

service_triggers() {
  procd_add_reload_trigger "network"
  procd_add_reload_trigger "packet_steering"
}

reload_service() {
  enable_packet_steering
}

start_service() {
  load_ecm
  enable_packet_steering

  if [ ! -r /sbin/fw4 ]; then
    enable_bridge_filtering
  else
    disable_bridge_filtering
  fi

  [ -d /sys/kernel/debug/ecm/ecm_nss_ipv4 ] && sysctl -w dev.nss.general.redirect=1

  if [ -d /sys/module/qca_ovsmgr ]; then
    insmod ecm_ovs
  fi
}

stop_service() {
  if [ ! -d /sys/module/ecm ]; then
    return
  fi

  [ -d /sys/kernel/debug/ecm/ecm_nss_ipv4 ] && sysctl -w dev.nss.general.redirect=0

  if [ -d /sys/module/ecm_ovs ]; then
    rmmod ecm_ovs
  fi

  unload_ecm
}

